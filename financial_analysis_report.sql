CREATE DATABASE FINANCIAL_ANALYSIS

SELECT * FROM Continent

SELECT * FROM Customers

SELECT * FROM [Transaction]

--1) DISPLAY THE COUNT OF CUSTOMER IN EACH REGION WHO HAS DONE THE TRANSACTION IN YEAR 2020
    SELECT COUNT(DISTINCT CUSTOMER_ID) AS COUNT_CUSTOMER FROM [Transaction]
	WHERE txn_date BETWEEN '2020-01-01' AND '2020-12-31' 

--2) DISPLAY THE MAXIMUM, MINIMUM OF TRANSACTION AMOUNT OF EACH TRANSACTION TYPE.
   SELECT txn_type, MAX(TXN_AMOUNT) AS MAX_AMT,MIN(TXN_AMOUNT) AS MIN_AMT
   FROM [Transaction]
   GROUP BY txn_type

--3) DISPLAY CUSTOMER ID, REGION NAME AND TRANSACTION AMOUNT WHERE TRANSACTION TYPE IS DEPOSIT AND
--TRANSACTION AMOUNT > 2000.
  SELECT [Transaction].customer_id,Continent.region_name,[Transaction].txn_amount FROM [Transaction]
  INNER JOIN Customers ON [Transaction].customer_id=Customers.customer_id
  INNER JOIN Continent ON Customers.region_id=Continent.region_id
  WHERE [Transaction].txn_type='DEPOSIT' AND [Transaction].txn_amount>2000

--4) FIND DUPLICATE RECORDS IN A CUSTOMER TABLE.
   SELECT CUSTOMER_ID,COUNT(*) AS COUNT
   FROM CUSTOMERS
   GROUP BY CUSTOMER_ID
   HAVING COUNT(*)>1

--5) DISPLAY THE DETAIL OF CUSTOMER ID, REGION NAME, TRANSACTION TYPE AND TRANSACTION AMOUNT FOR THE
--MINIMUM TRANSACTION AMOUNT IN DEPOSIT.
   SELECT [TRANSACTION].CUSTOMER_ID,CONTINENT.REGION_NAME,[TRANSACTION].TXN_TYPE,[TRANSACTION].TXN_AMOUNT
   FROM [TRANSACTION]
   JOIN CUSTOMERS ON [TRANSACTION].CUSTOMER_ID=CUSTOMERS.CUSTOMER_ID
   JOIN CONTINENT ON CUSTOMERS.REGION_ID=CONTINENT.REGION_ID
   WHERE [TRANSACTION].TXN_AMOUNT=(SELECT MIN(TXN_AMOUNT) FROM [TRANSACTION]
   WHERE [TRANSACTION].TXN_TYPE='DEPOSIT')

--6) CREATE A STORED PROCEDURE TO DISPLAY DETAILS OF CUSTOMER AND TRANSACTION TABLE WHERE TRANSACTION
--DATE IS GREATER THAN JUN 2020.
   CREATE OR ALTER PROCEDURE SP_CUSTOMERTRAN
   AS 
   BEGIN
   SELECT * FROM CUSTOMERS
   JOIN [TRANSACTION] ON CUSTOMERS.CUSTOMER_ID=[TRANSACTION].CUSTOMER_ID
   WHERE [TRANSACTION].TXN_DATE>'2020-06-01'
   END
   EXEC SP_CUSTOMERTRAN


--7) CREATE A STORED PROCEDURE TO INSERT A RECORD IN THE CONTINENT TABLE.
   CREATE OR ALTER PROCEDURE [DBO].[INSERTCONTINENT]
   @CONTINENTID INT,
   @CONTINENTNAME NVARCHAR(50) 
   AS
   BEGIN 
   INSERT INTO CONTINENT(REGION_ID,REGION_NAME)
   VALUES (@CONTINENTID,@CONTINENTNAME)
   END
    EXEC [DBO].INSERTCONTINENT 6,'NORTH AMERICA'


--8) CREATE A STORED PROCEDURE TO DISPLAY THE DETAILS OF TRANSACTIONS THAT HAPPENED ON A SPECIFIC DAY
   CREATE OR ALTER PROCEDURE SP_TRAN_SPECIDAY
   @TRANSACTION_DATE DATETIME
   AS 
   BEGIN
   SELECT * FROM [Transaction]
   WHERE txn_date=@TRANSACTION_DATE
   END

   EXEC SP_TRAN_SPECIDAY '2020-01-28'

--9) CREATE A USER DEFINED FUNCTION TO ADD 10% OF THE TRANSACTION AMOUNT IN A TABLE.   CREATE OR ALTER FUNCTION UDF_ADD10
   (
   @ADD10PER DECIMAL(18,2)
   )
   RETURNS DECIMAL(18,2)
   AS
   BEGIN
    DECLARE @new_amount DECIMAL(18,2)
    SET @new_amount = @ADD10PER + (@ADD10PER * 0.1)
    RETURN @new_amount
	END

	UPDATE [Transaction]
	SET txn_amount=DBO.UDF_ADD10(txn_amount)


--10) CREATE A USER DEFINED FUNCTION TO FIND THE TOTAL TRANSACTION AMOUNT FOR A GIVEN TRANSACTION TYPE.
   CREATE OR ALTER FUNCTION TOTAL_TRAN_AMOUNT
   (
   @TRANSACTION_TYPE VARCHAR(50)
   )
   RETURNS DECIMAL (18,2)
   AS
   BEGIN 
   DECLARE @TOTAL_AMOUNT DECIMAL(18,2)
   SELECT @TOTAL_AMOUNT=SUM(TXN_AMOUNT)
   FROM [Transaction]
   WHERE txn_type=@TRANSACTION_TYPE
   IF @TOTAL_AMOUNT IS NULL
   SET @TOTAL_AMOUNT=0
   RETURN @TOTAL_AMOUNT
   END

   SELECT DBO.TOTAL_TRAN_AMOUNT  ('PURCHASE') 


--11) CREATE A TABLE VALUE FUNCTION WHICH COMPRISES OF THE FOLLOWING COLUMNS CUSTOMER_ID,
--REGION_ID ,TXN_DATE , TXN_TYPE , TXN_AMOUNT WHICH WILL RETRIEVE DATA FROM THE ABOVE TABLE.
   CREATE OR ALTER FUNCTION GETTRANSACTIONS()
   RETURNS TABLE
   AS
   RETURN
   SELECT [Transaction].customer_id,Customers.region_id,[Transaction].txn_date,[Transaction].txn_type,[Transaction].txn_amount
   FROM [Transaction]
   JOIN Customers ON [Transaction].customer_id=Customers.customer_id

   SELECT * FROM DBO.GETTRANSACTIONS()


--12)CREATE A TRY CATCH BLOCK TO PRINT A REGION ID AND REGION NAME IN A SINGLE COLUMN
   CREATE OR ALTER PROCEDURE SP_PRINTREGION
   AS
   BEGIN TRY
   SELECT CAST (REGION_ID AS NVARCHAR(50)) + ' ' + REGION_NAME AS REGION
   FROM Continent
   END TRY
   BEGIN CATCH
   PRINT 'AN ERROR OCCURED: '+ ERROR_MESSAGE()
   END CATCH

   EXEC SP_PRINTREGION

--13) CREATE A TRY CATCH BLOCK TO INSERT A VALUE IN THE CONTINENT TABLE.   CREATE OR ALTER PROCEDURE SP_INSERTION   @CONTINENTID INT,   @CONTINENTNAME VARCHAR(50)   AS   BEGIN TRY   INSERT INTO Continent(region_id,region_name)   VALUES(@CONTINENTID,@CONTINENTNAME)   END TRY   BEGIN CATCH   PRINT 'ERROR OCCURED:' + ERROR_MESSAGE()   END CATCH   EXEC SP_INSERTION 7,'NORTH AFRICA'--14) CREATE A TRIGGER TO PREVENT DELETING A TABLE IN A DATABASE.   CREATE OR ALTER TRIGGER TRI_PREVENTDELETION   ON DATABASE   FOR drop_TABLE   AS    BEGIN     DECLARE @eventData XML
    SET @eventData = EVENTDATA()

    IF @eventData.value('(/EVENT_INSTANCE/ObjectName)[1]', 'nvarchar(max)') = 'CUSTOMERS'
    BEGIN
        RAISERROR('Deleting table_name is not allowed.', 16, 1)
        ROLLBACK
    END
   END   DROP TABLE Customers --15)DISPLAY TOP N CUSTOMERS ON THE BASIS OF TRANSACTION TYPE.   SELECT TOP 10   CUSTOMER_ID,TXN_TYPE,COUNT(*) AS TOTAL_TRANSACTION   FROM [TRANSACTION]   GROUP BY CUSTOMER_ID,TXN_TYPE   ORDER BY TOTAL_TRANSACTION DESC--16)CREATE A PIVOT TABLE TO DISPLAY THE TOTAL PURCHASE, WITHDRAWAL AND DEPOSIT FOR ALL THE CUSTOMERS.   SELECT *
   FROM (
    SELECT CUSTOMER_ID, TXN_TYPE, TXN_AMOUNT
    FROM [TRANSACTION]
    ) T
   PIVOT (
    SUM(TXN_AMOUNT)
    FOR TXN_TYPE IN ([PURCHASE], [WITHDRAWAL], [DEPOSIT])
  ) PIVOT_TABLE--17) CREATE A TRIGGER TO AUDIT THE DATA IN A TABLE.    CREATE TABLE TRACK_RECORDS   (   ID INT,   TRANSACTION_DATE DATETIME,   TRANSACTION_TYPE VARCHAR(100),   TRASACTION_AMT DECIMAL(16,2),   MODIFIEDDATE DATETIME DEFAULT (GETDATE()),   MODIFIEDUSER VARCHAR(100),   OPERATION VARCHAR(100)   )   SELECT * FROM TRACK_RECORDS   CREATE OR ALTER TRIGGER TRI_PREVENTION   ON DBO.[TRANSACTION]   FOR INSERT   AS   PRINT 'TRIGGER IS FIRED'   INSERT INTO TRACK_RECORDS(ID,TRANSACTION_DATE,TRANSACTION_TYPE,TRASACTION_AMT,MODIFIEDUSER,OPERATION)   SELECT customer_id,txn_date,txn_type,txn_amount,SYSTEM_USER,'INSTEADOFDETE'   FROM inserted   GO  
SELECT * FROM [TRANSACTION]SELECT * FROM TRACK_RECORDSINSERT INTO [Transaction] (customer_id,txn_date,txn_type,txn_amount)VALUES (585,GETDATE(),'DEPOSIT',21.23)
   



   

  
   

